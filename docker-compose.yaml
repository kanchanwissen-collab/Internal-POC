version: "3.8"

services:
  mongo:
    image: mongo:7
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    command: mongod --quiet --logpath /dev/null
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=12345678
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n -d postgres"]
      interval: 5s
      timeout: 5s
      retries: 20

  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      # Base URLs (host values are fine if you open from your host browser)
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_EDITOR_BASE_URL=http://localhost:5678/

      # Database: point to service DNS "postgres", not localhost
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=postgres
      - DB_POSTGRESDB_USER=n8n
      - DB_POSTGRESDB_PASSWORD=12345678
      - DB_POSTGRESDB_SCHEMA=public

      # Secrets (one value each; remove duplicates)
      - N8N_SECRET_COOKIE=saljfd@8408wsjfdw03r-fsdf
      - N8N_ENCRYPTION_KEY=3415267urejlkhfsk@lsadjf
      - N8N_JWT_SECRET=asfdlj@u09384sljdffasdjf@_*$

      # optional: silence future settings perms warning now
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    volumes:
      - n8n-data:/home/node/.n8n
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  browser-use-serverless:
    build:
      context: ./browser-use-serverless
      dockerfile: Dockerfile
    image: salonigupta19/browser-use:v1
    container_name: browser-use-serverless
    ports:
      - "8080:8080" # nginx â†’ uvicorn (8000) inside; nginx listens on 8080
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - CAPSOLVER_API_KEY=${CAPSOLVER_API_KEY}
      - REDIS_URL=redis://redis:6379/0
      - VNC_BASE_URL=http://localhost:8080  # <-- change if not accessing from localhost
      - REDIS_STREAM=browser_use_logs
      - REDIS_STREAM_MAXLEN=1000   # <-- no stray spaces/quotes
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      # adjust if your app exposes /health via nginx
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/health || curl -fsS http://localhost:8080 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20

  planner:
    build:
      context: ./planner-backend
      dockerfile: Dockerfile
    image: salonigupta19/planner:v1
    container_name: planner
    ports:
      - "8001:8001"
    environment:
      - PYTHONUNBUFFERED=1
      - DEBUG=True

      # Internal URLs: use service DNS names from inside the network
      - MONGO_URI=mongodb://mongo:27017/unified_db
      - MONGO_DB_NAME=unified_db
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook/preauth
      # If planner calls itself it can use http://planner:8001, but keep PROCESSOR_URL
      # for external publishers if needed. If planner itself is the subscriber, you might not need this.
      - PROCESSOR_URL=http://planner:8001/api/planner-preauth

      # Pub/Sub (works locally only if you run an emulator or mount creds)
      - GOOGLE_CLOUD_PROJECT=Agent-AI-DEV
      - PUBSUB_SUBSCRIPTION=agentic-platform-prior-auth-sub
      - GOOGLE_APPLICATION_CREDENTIALS=/app/application_default_credentials.json
    networks:
      - app-network
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
      n8n:
        condition: service_started
    
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8001/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  redis-data:
  n8n-data:
  postgres-data:
